readMore.$inject = ["$templateCache"];
'use strict';

'use strict';

angular
	.module('hm.readmore', [ 'ngSanitize'])
	.directive('hmReadMore', readMore)
	.config(function ($logProvider) {
		$logProvider.debugEnabled(false);
	});

/** @ngInject */
function readMore($templateCache) {
	var directive = {
		restrict: 'AE',
		scope: {
			hmText: '@',
			hmHtml: '@',
      hmLimit: '@',
			hmMoreText: '@',
			hmLessText: '@',
			hmDotsClass: '@',
			hmLinkClass: '@',
            hmHtmlText: '@',
            hmLink: '@'
    },
		template: $templateCache.get('readmore.template.html'),
		controller: hmReadMoreController,
		controllerAs: 'vm',
		bindToController: true
	};

	return directive;

	/** @ngInject */
	// "bindToController: true" binds scope variables to Controller
	function hmReadMoreController($filter, $scope, $log, $timeout) {
		var vm = this;
    var limit = null;
    
		vm.toggle = {
			dots: '...',
			dotsClass: vm.hmDotsClass,
			linkClass: vm.hmLinkClass
		}

		vm.$onInit = function(){
			$log.debug('initialize');
			setToggleMoreText();
			setToggleLessText();
			validateLimit();
			setLessAndMoreText();
			setShowToggle();
			setCurrentToggleText();
			setLinkClass();
			setDotsClass();
		}

		// Toggle functions
		function setToggleMoreText() {
			vm.toggle.moreText = vm.hmMoreText || 'Read more';
		}

		function setToggleLessText() {
			vm.toggle.lessText = vm.hmLessText || 'Read less';
		}

		function setCurrentToggleText() {
			vm.toggle.text = vm.toggle.state ? vm.toggle.lessText : vm.toggle.moreText;
		}

		function setShowToggle() {
			vm.toggle.show = vm.moreText && vm.moreText.length > 0;
		}

		function setLinkClass(){
			vm.toggle.linkClass = vm.hmLinkClass;
		}

		function setDotsClass(){
			vm.toggle.dotsClass = vm.hmDotsClass;
		}

		vm.doToggle = function () {
      $timeout(function(){
        vm.toggle.state = !vm.toggle.state;
        vm.showMoreText = !vm.showMoreText;
        setCurrentToggleText();        
      })
		}

		$scope.$watch('vm.hmMoreText', function (newValue, oldValue) {
			if (newValue != oldValue) {
				setToggleMoreText();
				setCurrentToggleText();
			}
		});

		$scope.$watch('vm.hmLessText', function (newValue, oldValue) {
			if (newValue != oldValue) {
				setToggleLessText();
				setCurrentToggleText();
			}
		});

		$scope.$watch('vm.hmDotsClass', function (newValue, oldValue) {
			if (newValue != oldValue) {
				setDotsClass();
			}
		});

		$scope.$watch('vm.hmLinkClass', function (newValue, oldValue) {
			if (newValue != oldValue) {
				setLinkClass();
			}
		});

		// ----------

		// If negative number, set to undefined
		function validateLimit() {
			vm.hmLimit = (vm.hmLimit && vm.hmLimit <= 0) ? undefined : vm.hmLimit;
 			limit = vm.hmLimit;
		}

		function getMoreTextLimit() {
			return vm.hmLimit && vm.hmLimit < vm.hmText.length ? vm.hmLimit - vm.hmText.length : 0;
		}

    function cloneNode(node, deep){
      if (node.nodeType === 3) return document.createTextNode(node.data);
      else return node.cloneNode(deep) 
    }

    function walk(node, myNode, oDom, hasOverflow, callback) {
      node = node.firstChild;
      while (node !== null) {

        if (hasOverflow) 
        {
          var n = cloneNode(node, true);
          oDom.append(n);
        }
        else {
          var n = cloneNode(node);
          myNode.appendChild(n)
          if ((limit = limit - callback(node)) < 0){
              var hidden = myNode.innerText.slice(limit, myNode.innerText.length);
              oDom.innerText = hidden;
              myNode.innerText = myNode.innerText.slice(0, limit); 
              hasOverflow = true;
          } 
          else{ 
            if (walk(node, myNode.lastElementChild, oDom, hasOverflow, callback) === false) {
              return false;
            }
          }
        }
        node = node.nextSibling;
      }
      return true
    }

    function setLessAndMoreText () {
      if (vm.hmHtml)
      {
        var htmlParser = new DOMParser();
        var xhtml = htmlParser.parseFromString(vm.hmHtml,"text/html");
        xhtml = xhtml.querySelector("body")
        var myDom = document.createElement('span');
        var overflowDom = document.createElement('span');
        walk(xhtml, myDom, overflowDom, false, function (node) {
          if (node.nodeType === 3) { 
              var text = node.data.trim();
              return text.length;
          }
          return 0;
        })

        vm.lessText = myDom.innerHTML;
        vm.moreText = overflowDom.innerHTML;      
      }
      else if (vm.hmText)
      {
        vm.lessText = $filter('limitTo')(vm.hmText, vm.hmLimit);
        vm.moreText = $filter('limitTo')(vm.hmText, getMoreTextLimit());          
      }
    }
    
		$scope.$watch('vm.hmText', function (newValue, oldValue) {
			if (newValue != oldValue) {
				validateLimit(); 
				setLessAndMoreText();
				setShowToggle();
			}
		});

		$scope.$watch('vm.hmLimit', function (newValue, oldValue) {
			if (newValue != oldValue) {
				validateLimit();
				setLessAndMoreText();
				setShowToggle();
			}
		});
	}
};

angular.module("hm.readmore").run(["$templateCache", function($templateCache) 
	{$templateCache.put("readmore.template.html",
'<span name="text">' + 
  '<span ng-bind-html="vm.lessText"></span>' + 
  '<span ng-show="vm.showMoreText" class="more-show-hide" ng-bind-html="vm.moreText"></span>' + 
'</span>' + 
'' + 
'<span name="toggle" ng-show="vm.toggle.show">' + 
  '<span ng-class="vm.toggle.dotsClass" ng-show="!vm.toggle.state">{{ vm.toggle.dots }}</span>' + 
  '<a ng-class="vm.toggle.linkClass" ng-href="{{vm.hmLink}}">{{ vm.toggle.text }}</a>' + 
'</span>');
   }
]);